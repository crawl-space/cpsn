#!/usr/bin/ruby
#
# cpsn - Query Friend status on the Playstation Network (tm)
#
# Author:: James Bowes <jbowes@repl.ca>
# Copyright:: Copyright (C) 2009 - 2011 James Bowes

require 'rubygems'
require 'mechanize'
require 'json'
require 'yaml'
require 'optparse'
require 'logger'
require 'set'
require 'highline/import'

$login_url = "https://store.playstation.com/external/index.vm?returnURL=http://us.playstation.com/uwps/PSNTicketRetrievalGenericServlet"
$friend_url = "http://us.playstation.com/playstation/psn/profile/friends?id="


class NotLoggedInError < Exception
end

class Cpsn

    attr_accessor :settings, :groups, :default_group
  
    def initialize(options)
        @log = Logger.new(STDERR)
        @log.level = Logger::WARN
        if options[:debug]
            @log.level = Logger::DEBUG
        end
       
        # may be set in load_groups
        @default_group = 'all'

        @settings = load_settings()
        @groups = load_groups(@settings)

        get_agent(options[:cookie])
    end

    def load_settings()
        @log.debug("Loading settings")
        begin
            settings = YAML::parse_file(File.expand_path("~/.cpsn/settings.yml"))
        rescue
            settings = {}.to_yaml
        end
        return settings
    end
   
    def load_groups(settings)
        @log.debug("Loading groups")
        groups = {}

        if not settings[:groups]
            return groups
        end

        for group in settings[:groups].value
            name = group.value.keys[0].value
            vals = group.value[group.value.keys[0]]

            if name == 'default'
                @default_group = vals.value
                @log.debug("Found default group #{@default_group}")
                next
            end

            members = []
            mem_str = ""
            for user in vals.value do
                members << user.value
                mem_str += user.value 
                mem_str += " "
            end
            @log.debug("Found group #{name} [ #{mem_str}]")
            groups[name] = members
        end
        return groups
    end


    def login_failed
        puts "Error logging in. Did you give the right username and password?"
        exit
    end


    def get_username
        ask("username: ")
    end

    def get_password
        ask("password: ") {|q| q.echo = false}
    end

    def get_cookie
        @log.debug("Signing in for new cookie")

        if @settings[:username].nil?
            username = get_username
        else
            username = @settings[:username].value
        end
        
        if @settings[:password].nil?
            password = get_password
        else
            password = @settings[:password].value
        end

        @agent.redirect_ok = false
        page = @agent.get($login_url)
        login_form = page.forms.first
        login_form.j_username = username
        login_form.j_password = password
        page = @agent.submit(login_form)
        
        if page.code != "302"
            login_failed
        end

        page = @agent.get(page.response['Location'])

        if page.code != "302"
            login_failed
        end

        # we don't need to follow this last redirect, just to get the sesison
        # id
        location = page.response['Location']
        parts = location.split("sessionId=")
        sessionId = parts[1]

        # this sets the sessionid cookie and others, which we need.
        @agent.get("http://us.playstation.com/uwps/HandleIFrameRequests?sessionId=" + sessionId)

        if not File.directory? File.expand_path("~/.cpsn")
            Dir::mkdir File.expand_path("~/.cpsn")
        end

        @agent.cookie_jar.save_as File.expand_path("~/.cpsn/cookies.yml")


        @agent.redirect_ok = true
    end

    def get_agent(force_cookie)
        @log.debug("Creating new user agent")
        @agent = Mechanize.new
        @agent.user_agent_alias = 'Mac FireFox'
        @agent.redirect_ok = true

        if File.exist? File.expand_path("~/.cpsn/cookies.yml") and not force_cookie
            @agent.cookie_jar.load File.expand_path("~/.cpsn/cookies.yml")
        else
            get_cookie
        end
    end

    def get_friends()
        begin
            return _get_friends()
        rescue Mechanize::ResponseCodeError => response
            if response.response_code == '403'
                get_cookie
                retry
            else
                raise response
            end
        rescue NotLoggedInError
            get_cookie
            retry
        end

    end

    def get_friend_status(friend)
        begin
            return _get_friend_status(friend)
        rescue Mechanize::ResponseCodeError => response
            if response.response_code == '403'
                get_cookie
                retry
            else
                raise response
            end
        end
    end

    private

    def _get_friends()
        @log.debug("Getting friends list")
        @agent.get( "http://us.playstation.com/myfriends/")
        url = $friend_url + rand().to_s
        page = @agent.get("http://us.playstation.com/uwps/decryptText?id=0.1234554")
        @log.debug("friend url: " + url)
        page = @agent.get(url, nil, "http://us.playstation.com/myfriends/")

        divs = page.search("div.slotcontent")

        if divs.length == 0
            raise NotLoggedInError
        end

        friends = []
        for div in divs
            friend = div.attributes["id"]
            friends << friend
            @log.debug("Found friend #{friend}")
        end

        return friends
    end 

    def _get_friend_status(friend)
        @log.debug("Loading friend status for #{friend}")
        page = @agent.get("http://us.playstation.com/playstation/psn/profile/" + friend + "?id=0.12343", nil, "http://us.playstation.com/myfriends")

        friend = {:name => friend,
                  :status => 'offline',
                  :playing => '',
        }

        status = page.search("div.oStatus")[0]

        if status.search("div")[0].attributes['class'].to_s == "onlineStatus online"
            friend[:status] = "online"

            playing = page.search("span._iamplaying_")
            friend[:playing] = playing[0].text.strip

        end

        return friend
    end

end


options = {}
optparse = OptionParser.new do |opts|
    options[:offline] = false
    opts.on('-o', '--offline', 'Show offline contacts') do
        options[:offline] = true
    end

    options[:debug] = false
    opts.on('-d', '--debug', 'Show debugging information') do
        options[:debug] = true
    end

    options[:cookie] = false
    opts.on('-c', '--cookie', 'Force cookie expiration') do
        options[:cookie] = true
    end

    opts.on(nil, '--version', 'Display version information') do
        gem_dir = File.join(File.dirname(__FILE__), '..')
        File.open(File.join(gem_dir, 'VERSION')) do |version_file|
            print version_file.read
        end
        exit
    end

    opts.on('-h', '--help', 'Show help') do 
        puts opts
        exit
    end
end

optparse.parse!

cpsn = Cpsn.new(options)

if ARGV.length == 0
    ARGV << cpsn.default_group
end

friend_names = Set.new []
for arg in ARGV
    if arg == 'all'
        friend_names.merge(cpsn.get_friends)
    elsif cpsn.groups.has_key? arg
        friend_names.merge(cpsn.groups[arg])
    else
        friend_names.add(arg)
    end
end

for friend_name in friend_names
    friend = cpsn.get_friend_status(friend_name)

    if friend
        if friend[:status] != "offline" or options[:offline]
            puts friend[:status] + "\t" + friend[:name] + "\t" + friend[:playing]
        end
    else
        puts "Error: no access to " + friend_name
    end
end
